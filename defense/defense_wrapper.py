#!/usr/bin/env python3
"""
================================================================================
File:        defense_wrapper.py
Description: Parametrizable defense configuration wrapper
             Allows easy selection of defense levels (Easy/Medium/Complex)
             and configuration of all defense mechanisms
Parameters:  --mode <easy|medium|complex|custom>, --delay-type <linear|progressive>,
             --max-attempts <int>, --lockout-duration <int>,
             --enable-captcha, --enable-logging
Author:      Raiyan Mahfuz 
Date:        2025-10-28
================================================================================

This script provides a unified interface to configure and test all defense
mechanisms without modifying the secure server directly.
"""

import argparse
import sys
from pathlib import Path

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).resolve().parent.parent))

from defense.delay import LINEAR_DELAY_SECONDS, PROGRESSIVE_DELAY_BASE, PROGRESSIVE_DELAY_MULTIPLIER
from defense.counter import MAX_FAILED_ATTEMPTS, LOCKOUT_DURATION_SECONDS


# Defense configuration presets
DEFENSE_PRESETS = {
    "easy": {
        "name": "Easy Defense",
        "description": "Basic protection with minimal impact on user experience",
        "delay_type": "linear",
        "linear_delay": 0.5,
        "progressive_base": 1.0,
        "progressive_multiplier": 1.5,
        "max_attempts": 10,
        "lockout_duration": 60,  # 1 minute
        "enable_captcha": False,
        "enable_logging": True,
    },
    "medium": {
        "name": "Medium Defense",
        "description": "Balanced protection with moderate user impact",
        "delay_type": "progressive",
        "linear_delay": 1.0,
        "progressive_base": 1.0,
        "progressive_multiplier": 2.0,
        "max_attempts": 5,
        "lockout_duration": 300,  # 5 minutes
        "enable_captcha": True,
        "enable_logging": True,
    },
    "complex": {
        "name": "Complex Defense",
        "description": "Maximum protection with strict security measures",
        "delay_type": "progressive",
        "linear_delay": 2.0,
        "progressive_base": 2.0,
        "progressive_multiplier": 3.0,
        "max_attempts": 3,
        "lockout_duration": 900,  # 15 minutes
        "enable_captcha": True,
        "enable_logging": True,
    },
}


def display_config(config, preset_name=None):
    """Display current defense configuration."""
    print("=" * 70)
    if preset_name:
        print(f"DEFENSE CONFIGURATION: {DEFENSE_PRESETS[preset_name]['name']}")
        print(f"Description: {DEFENSE_PRESETS[preset_name]['description']}")
    else:
        print("DEFENSE CONFIGURATION: Custom")
    print("=" * 70)
    print()
    
    print("[3.1] Delay Configuration:")
    print(f"  - Type: {config['delay_type'].upper()}")
    if config['delay_type'] == 'linear':
        print(f"  - Linear Delay: {config['linear_delay']}s per attempt")
    else:
        print(f"  - Progressive Base: {config['progressive_base']}s")
        print(f"  - Progressive Multiplier: {config['progressive_multiplier']}x")
    print()
    
    print("[3.2] Counter & User Interaction:")
    print(f"  - Max Failed Attempts: {config['max_attempts']}")
    print(f"  - Lockout Duration: {config['lockout_duration']}s ({config['lockout_duration']//60} min)")
    print(f"  - CAPTCHA Enabled: {'YES' if config['enable_captcha'] else 'NO'}")
    print()
    
    print("[3.3] Logging:")
    print(f"  - Logging Enabled: {'YES' if config['enable_logging'] else 'NO'}")
    print()
    
    print("=" * 70)


def generate_env_vars(config):
    """Generate environment variables for secure_server.py."""
    env_vars = []
    
    # Delay configuration
    env_vars.append(f"DEFENSE_MODE={config['delay_type']}")
    env_vars.append(f"LINEAR_DELAY_SECONDS={config['linear_delay']}")
    env_vars.append(f"PROGRESSIVE_DELAY_BASE={config['progressive_base']}")
    env_vars.append(f"PROGRESSIVE_DELAY_MULTIPLIER={config['progressive_multiplier']}")
    
    # Counter configuration
    env_vars.append(f"MAX_FAILED_ATTEMPTS={config['max_attempts']}")
    env_vars.append(f"LOCKOUT_DURATION_SECONDS={config['lockout_duration']}")
    
    # Feature flags
    env_vars.append(f"ENABLE_CAPTCHA={'1' if config['enable_captcha'] else '0'}")
    env_vars.append(f"ENABLE_LOGGING={'1' if config['enable_logging'] else '0'}")
    
    return env_vars


def write_config_file(config, output_path):
    """Write configuration to a file for easy server startup."""
    with open(output_path, 'w') as f:
        f.write("# Defense Configuration\n")
        f.write("# Generated by defense_wrapper.py\n")
        f.write("#\n")
        f.write("# To use this configuration, source this file before starting the server:\n")
        f.write("#   Windows PowerShell: . ./defense_config.ps1\n")
        f.write("#   Linux/Mac: source ./defense_config.sh\n")
        f.write("#\n\n")
        
        env_vars = generate_env_vars(config)
        
        # Write PowerShell version
        if output_path.endswith('.ps1'):
            for var in env_vars:
                key, value = var.split('=', 1)
                f.write(f"$env:{key} = '{value}'\n")
        else:
            # Write Bash version
            for var in env_vars:
                f.write(f"export {var}\n")
    
    print(f"[+] Configuration written to: {output_path}")


def main():
    parser = argparse.ArgumentParser(
        description="Defense mechanism configuration tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Use preset configurations
  python defense_wrapper.py --mode easy
  python defense_wrapper.py --mode medium
  python defense_wrapper.py --mode complex
  
  # Custom configuration
  python defense_wrapper.py --mode custom --delay-type progressive --max-attempts 3
  
  # Generate config file for server
  python defense_wrapper.py --mode complex --output defense_config.ps1
        """
    )
    
    parser.add_argument(
        "--mode",
        choices=["easy", "medium", "complex", "custom"],
        required=True,
        help="Defense level preset or custom configuration"
    )
    
    # Custom configuration options
    parser.add_argument("--delay-type", choices=["linear", "progressive"], help="Type of delay mechanism")
    parser.add_argument("--linear-delay", type=float, help="Linear delay in seconds")
    parser.add_argument("--progressive-base", type=float, help="Progressive delay base time")
    parser.add_argument("--progressive-multiplier", type=float, help="Progressive delay multiplier")
    parser.add_argument("--max-attempts", type=int, help="Maximum failed login attempts before lockout")
    parser.add_argument("--lockout-duration", type=int, help="Account lockout duration in seconds")
    parser.add_argument("--enable-captcha", action="store_true", help="Enable CAPTCHA challenge")
    parser.add_argument("--disable-captcha", action="store_true", help="Disable CAPTCHA challenge")
    parser.add_argument("--enable-logging", action="store_true", help="Enable authentication logging")
    parser.add_argument("--disable-logging", action="store_true", help="Disable authentication logging")
    
    # Output options
    parser.add_argument("--output", help="Write configuration to file (.ps1 or .sh)")
    parser.add_argument("--show-only", action="store_true", help="Only display configuration, don't generate files")
    
    args = parser.parse_args()
    
    # Load base configuration from preset
    if args.mode in DEFENSE_PRESETS:
        config = DEFENSE_PRESETS[args.mode].copy()
    else:
        # Start with medium as base for custom
        config = DEFENSE_PRESETS["medium"].copy()
    
    # Apply custom overrides
    if args.delay_type:
        config["delay_type"] = args.delay_type
    if args.linear_delay is not None:
        config["linear_delay"] = args.linear_delay
    if args.progressive_base is not None:
        config["progressive_base"] = args.progressive_base
    if args.progressive_multiplier is not None:
        config["progressive_multiplier"] = args.progressive_multiplier
    if args.max_attempts is not None:
        config["max_attempts"] = args.max_attempts
    if args.lockout_duration is not None:
        config["lockout_duration"] = args.lockout_duration
    if args.enable_captcha:
        config["enable_captcha"] = True
    if args.disable_captcha:
        config["enable_captcha"] = False
    if args.enable_logging:
        config["enable_logging"] = True
    if args.disable_logging:
        config["enable_logging"] = False
    
    # Display configuration
    display_config(config, args.mode if args.mode in DEFENSE_PRESETS else None)
    
    # Generate output files if requested
    if args.output and not args.show_only:
        write_config_file(config, args.output)
        print()
        print("To apply this configuration:")
        if args.output.endswith('.ps1'):
            print(f"  . .\\{args.output}")
            print("  python server\\secure_server.py")
        else:
            print(f"  source {args.output}")
            print("  python server/secure_server.py")
    
    elif not args.show_only:
        print("Environment Variables:")
        print()
        for var in generate_env_vars(config):
            print(f"  {var}")
        print()
        print("To use these settings, set the environment variables before starting the server.")
    
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
